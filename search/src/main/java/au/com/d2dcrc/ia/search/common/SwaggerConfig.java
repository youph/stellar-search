package au.com.d2dcrc.ia.search.common;

import java.net.URI;
import java.util.Collections;
import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.ApiKey;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.Contact;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.service.SecurityScheme;
import springfox.documentation.service.StringVendorExtension;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger.web.SecurityConfiguration;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

/**
 * Configure and bind Swagger for the signals API.
 */
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    /**
     * Signals API Documentation.
     *
     * @return a Swagger Docket
     */
    @Bean
    public Docket signalsApi() {

        final ApiInfo apiInfo = new ApiInfo(
            "Investigative Analytics: Search - API",
            "Swagger Autogenerated API Specification",
            "1.0",
            null,
            new Contact("D2DCRC", "http://www.d2dcrc.com.au", "info@d2dcrc.com.au"),
            "D2DCRC licence",
            null,
            Collections.singleton(new StringVendorExtension("D2DCRC", "D2DCRC"))
        );

        return new Docket(DocumentationType.SWAGGER_2)
            .select()
            .apis(RequestHandlerSelectors.basePackage("au.com.d2dcrc.ia.search"))
            .paths(PathSelectors.ant("/api/**"))
            .build()
            .pathMapping("/")
            .produces(Collections.singleton(MediaType.APPLICATION_JSON_VALUE))
            .consumes(Collections.singleton(MediaType.APPLICATION_JSON_VALUE))
            .directModelSubstitute(URI.class, String.class)
            .apiInfo(apiInfo);
    }

}

